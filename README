An S-Expression library written in Go.

S-Expressions can be modelled using a variety of structures. This package provides three implementations:

Slice uses an []interface{} as its backing store but is accessed via list semantics. As such it is suited to tasks
where breadth-first search and speed of element access are priorities;

LinearList is a standard singly-linked list without any protections to guard against cyclic links between nodes;

CycList is a generalised circular list where the terminating node links back to the first node.

Both CycList and LinearList use a common ListHeader allowing them to be interchanged as necessary. This ListHeader
has a ListNode type associated with it which specifies the type of node used by a given instance of a list, and
provides access caching to speed operations in frequently accessed portions of the list.

All three S-Expression data structures store interface{} objects and as such can be used to store each other in
arbitrary numbers and to arbitrary depths.

An additional SliceValue type is provides which uses a reflect.Value containing a slice as its backing store. This
is not guaranteed to be usable as an S-Expression but provides a convenient way to reuse many of the functions
specified for S-Expressions on slices of any type.